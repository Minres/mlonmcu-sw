PROJECT(ml_interface)

# SET(OUT_DIR ../../../out)

IF(DEBUG_ARENA_USAGE)
    SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DDEBUG_ARENA_USAGE=1")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG_ARENA_USAGE=1")
ELSE()
    SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DDEBUG_ARENA_USAGE=0")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG_ARENA_USAGE=0")
ENDIF()
IF("${FRAMEWORK}" STREQUAL "tflite")
    SET(TF_OUT_DIR ${SRC_DIR}/)
    SET(GEN_SRC ${TF_OUT_DIR}/model.cc)
    GET_FILENAME_COMPONENT(GEN_SRC ${GEN_SRC} REALPATH)
    GET_FILENAME_COMPONENT(EXTRA_INC ${GEN_SRC} DIRECTORY)
    SET(EXTRA_SRC ml_interface_tflm.cc ${GEN_SRC})
    SET(EXTRA_LIBS tflite)
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DTFLMC_DEBUG_ALLOCATIONS")
ELSEIF("${FRAMEWORK}" STREQUAL "tvm")
    SET(TVM_OUT_DIR ${SRC_DIR}/codegen/host/src)
    SET(EXTRA_SRC ml_interface_tvm.c)

    FILE(
        GLOB
        TVM_SRCS
        ${TVM_OUT_DIR}/*_lib*.c
        ${TVM_OUT_DIR}/*_lib*.cc
    )

    # Need this in extra target to avoid circular dependency .
    COMMON_ADD_LIBRARY(tvm_extension STATIC ${TVM_SRCS})

    IF("${BACKEND}" STREQUAL "tvmrt")
        SET(EXTRA_SRC ${EXTRA_SRC} ${SRC_DIR}/runtime_wrapper.c)
        TARGET_LINK_LIBRARIES(tvm_graph_rt PUBLIC tvm_extension)
        SET(TVM_LIB tvm_graph_rt)
        SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DTVMRT_DEBUG_ALLOCATIONS")
    ELSEIF("${BACKEND}" STREQUAL "tvmaot")
        SET(EXTRA_SRC ${EXTRA_SRC} ${SRC_DIR}/aot_wrapper.c)
        SET(TVM_LIB tvm_aot_rt)
        SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DTVMAOT_DEBUG_ALLOCATIONS")
    ELSEIF("${BACKEND}" STREQUAL "tvmcg")
        SET(EXTRA_SRC ${EXTRA_SRC} ${SRC_DIR}/staticrt.c)
        SET(TVM_LIB tvm_static_rt)
        SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DTVMCG_DEBUG_ALLOCATIONS")
    ELSE()
        MESSAGE(FATAL_ERROR "Invalid backend: ${BACKEND}")
    ENDIF()
    SET(EXTRA_INC ${TVM_OUT_DIR})

    TARGET_INCLUDE_DIRECTORIES(tvm_extension PUBLIC ${TVM_HEADERS} ${TVM_OUT_DIR} ${SRC_DIR})
    # TARGET_LINK_LIBRARIES(tvm_extension PUBLIC ${TVM_LIB})
    SET(EXTRA_LIBS tvm_extension ${TVM_LIB})
ELSE()
    MESSAGE(FATAL_ERROR "Neither TFLM nor TVM is used!")
ENDIF()
LIST(APPEND EXTRA_LIBS ${CUSTOM_OPS_LIBS})

IF(MODEL_DIR)
    GET_FILENAME_COMPONENT(MODEL_SUPPORT_DIR ${MODEL_DIR}/support REALPATH)
    GET_FILENAME_COMPONENT(MODEL_NAME ${MODEL_DIR} NAME)
ENDIF()

IF(MODEL_SUPPORT_DIR AND EXISTS ${MODEL_SUPPORT_DIR})
    ADD_SUBDIRECTORY(${MODEL_SUPPORT_DIR} model_support_bin_${MODEL_NAME})
ELSE()
    ADD_SUBDIRECTORY(default_model_support)
ENDIF()

COMMON_ADD_LIBRARY(${PROJECT_NAME}_base STATIC ${DATA_SRC})
TARGET_LINK_LIBRARIES(${PROJECT_NAME}_base PUBLIC support ${EXTRA_LIBS})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}_base PUBLIC . ${EXTRA_INC})

COMMON_ADD_LIBRARY(${PROJECT_NAME} STATIC ml_interface.c ${EXTRA_SRC})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC ${PROJECT_NAME}_base model_support)
IF(NUM_RUNS)
    TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PUBLIC NUM_RUNS=${NUM_RUNS})
ENDIF()
